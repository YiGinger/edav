1
?plot
# data
x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012,
0.9055, 1.3307)
y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542,
0.9717, 0.9357)
ShortSci = c("MotAlb", "PruMod", "EriRub", "LusMeg", "PhoOch", "PhoPho",
"SaxRub", "TurMer", "TurPil", "TurPhi")
# basic plot
plot(x, y, asp=1)
abline(h = 1, col = "green")
abline(v = 1, col = "green")
text(x, y, labels = ShortSci, cex= 0.7, offset = 10)
identify(x, y, labels = ShortSci, cex = 0.7)
sdfl
# data
x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012,
0.9055, 1.3307)
y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542,
0.9717, 0.9357)
ShortSci = c("MotAlb", "PruMod", "EriRub", "LusMeg", "PhoOch", "PhoPho",
"SaxRub", "TurMer", "TurPil", "TurPhi")
# basic plot
plot(x, y, asp=1)
abline(h = 1, col = "green")
abline(v = 1, col = "green")
z = c("1" , "2" , "1" , "2" , "3" , "1" , "2" , "3" , "1" , "2")
text(x, y, labels = z, cex= 0.7, offset = 10)
text(x, y, labels = ShortSci, cex= 0.7, offset = 10)
plot(x , y , label = z)
?plot
require(calibrate)
textxy(x, y, labs=ShortSci, cx=0.7)
install.packages(calibrate)
install.packages("calibrate")
require(calibrate)
textxy(x, y, labs=ShortSci, cx=0.7)
x1 <- runif(100)
x2 <- runif(100)
y  <- sample.int(3 , 100 , replace = T)
plot(x1,x2,type = "n")
text(x1,x2,labels = y,col = c('red','blue','green')[y])
?contour
q()
?webuse
??webuse
require(stats)
require(graphics)
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
install.packages("ggplot2")
library("ggplot2")
ggplot(cars)
ggplot(cars) + geom_bar()
?cars
head(cars)
str(cars)
?ggplot
ggplot(data = cars) + geom_bar()
p = qplot(speed , dist , data = cars)
p + geom_abline()
p + geom_abline(intercept = 25)
p + stat_smooth(method = "lm" , se = FALSE)
p + stat_smooth(method = "lm" , se = TRUE)
c(1 , 2)
df = data.frame(a = rnorm(10 , 25) , b = rnorm(10 , 0))
p + geom_abline(aes(intercept = a , slope = b) , data = df)
df
?rnor
?rnorm
rm(list = ls())
setwd("")
tennis <- read.csv("/Users/michaeljiang/Desktop/QMSS/Coursework/Data Visualization/Lab3/10yearsUSOpen.csv")
#install.packages("ggplot2")
library("ggplot2")
t <- subset(tennis,country1=="USA"|country1=="ITA"|country1=="RUS"|country1=="GER"|country1=="BEL")
qplot(year, data=t, fill=country1, geom="bar")
ggplot(t, aes(year, fill=country1)) + geom_bar()
qplot(year, data=t, fill=country1, geom="bar")+ coord_flip()
qplot(year, data=t, fill=country1, geom="bar", position="fill")+coord_flip()
f1<-qplot(year, data=t, fill=country1, geom="bar", position="dodge",binwidth=1)
f1
f2=f1+scale_x_continuous(breaks = seq(2003, 2012, 1))
f2
f3<-f2+scale_fill_manual(values=c("#7fc6bc","#083642","#b1df01","#cdef9c","#466b5d"))
f3
qplot(year, data=t, fill=country1, geom="bar", position="dodge",binwidth=0.5)+ scale_fill_brewer(palette="Blues")
RColorBrewer::display.brewer.all()
qplot(c(winner1,winner2),c(error1,error2),data=tennis,size=c(winner1,winner2)/c(error1,error2))
qplot(c(winner1,winner2),c(error1,error2),data=tennis,size=c(winner1,winner2)/c(error1,error2),color=factor(rep (1:0,each=nrow(tennis))))
qplot(c(winner1,winner2),c(error1,error2),data=tennis,size=c(winner1,winner2)/c(error1,error2),color=c(ace1,ace2))+scale_colour_gradient(low="black", high="red")
qplot(c(winner1,winner2),c(error1,error2),data=tennis,size=c(winner1,winner2)/c(error1,error2),color=c(ace1,ace2),shape=factor(rep(0:1,each=nrow(tennis))))+scale_colour_gradient(low="blue", high="red")
plot1<- qplot(c(winner1,winner2),c(error1,error2),data=tennis,size=c(winner1,winner2)/c(error1,error2),color=c(ace1,ace2), shape= factor(rep(0:1,each=nrow(tennis))))+scale_colour_gradient(low="blue", high="red",name="Number of Aces")
plot1
plot2<-plot1+ xlab("Number of Winners")+ ylab("Number of Errors")
plot2
plot3<-plot2+scale_colour_gradient(low="blue", high="red", name="Number of Aces")+ scale_shape_discrete(name="Result",labels=c("Winner","Loser"))+scale_size_continuous(name="Ratio of Winners to Errors")
plot3
plot4<-qplot(c(winner1,winner2),c(error1,error2),data=tennis,color=factor(rep(0:1,each=nrow(tennis))))
plot4
plot4+geom_smooth()
plot4+geom_smooth(method="loess", level=0.95)
plot4+geom_smooth(method="loess", level=0.95)
qplot(c(firstPointWon1,firstPointWon2,secPointWon1,secPointWon2),geom="density",data=tennis, fill=factor(rep(1:4,each=nrow(tennis))), alpha=0.2)
qplot(c(firstPointWon1,firstPointWon2,secPointWon1,secPointWon2),geom="density",data=tennis, fill=factor(rep(1:4,each=nrow(tennis))), alpha=0.2)+facet_grid(year~.)
plot4+geom_smooth(method="loess", level=0.95)
install.packages("maps")
library(mpas)
library(maps)
map("state")
map("world")
library(maps)
map("state") #(Figure 1)
map("world") #(Figure 2)
# plot north America (Figure 3)
xlim <- c(-171.738281, -56.601563)
ylim <- c(12.039321, 71.856229)
map("world", col= "#f3f3f3", fill= TRUE, bg= "white", lwd= 0.3, xlim=xlim, ylim=ylim)
# plot new york state (Figure 4 & 5)
map("state", "New York")
data(us.cities)
map.cities(us.cities, country="NY")
# add color or text on existing maps (Figure 6)
map("state", interior= FALSE)
map("state", boundary= TRUE, col="gray", add= TRUE)
# highlight texas (Figure 7)
map("state", col= "grey", boundary=TRUE, fill= TRUE, lty= 5,lwd= 0.2)
map("state", regions= "texas", col = "red", fill= TRUE, add= TRUE, lty= 1, lwd= 2)
map.text("state","texas", col="white", add= TRUE)
map.text("state","texas", col="white")
map.text("state","texas", col="white")
map("state", regions= "texas", col = "red", fill= TRUE, add= TRUE, lty= 1, lwd= 2)
?t
# this code is for EDAV blog post 2
# this code would generate 3 maps plot for grade A, grade B, grade C chinese restaurant
# in ggmap, and compare the distribution of them
# Clear all existing objects
rm(list = ls())
setwd('/Users/michaeljiang/Desktop/edav/edav/assets/michael_jiang_assets_two/src')
# Load the data
data = read.csv('nyc_restaurant_grade.csv')
# Select Chinese restaurant
data = data[data$CUISINECODE == 20 , ]
# Select Manhattan restaurant
data = data[data$BORO == 1 , ]
# Get the latest grading
data = data[ , c(2 , 4 , 5 , 6 , 7 , 13 , 14)]
data = data[data$GRADEDATE != "" , ]
str(data)
data$GRADEDATE
library(stringr)
str_split('10/4/12 0:00' , " ")
ddd = data$GRADEDATE
ddd
ddd = str_split(ddd)
ddd = str_split(ddd , ' ')
ddd
ddd = data$GRADEDATE
ddd = str_split(ddd , ' ')[[1]]
ddd
ddd = data$GRADEDATE
ddd = str_split(ddd , ' ')[[7]][1]
ddd
ddd2 = []
ddd2 = NULL
ddd = str_split(data$GRADEDATE , ' ')
ddd2 = NULL
for (i in nrow(ddd)) {
ddd2 = c(ddd2 , ddd[[i]][1])
}
ddd2
ddd
nrow(ddd)
str(ddd)
ncol(names(ddd))
names(ddd)
length(ddd)
ddd2 = NULL
for (i in length(ddd)) {
ddd2 = c(ddd2 , ddd[[i]][1])
}
ddd2
ddd2 = c(ddd2 , ddd[[2]][1])
ddd2
ddd2 = NULL
for (i in 1 : length(ddd)) {
ddd2 = c(ddd2 , ddd[[i]][1])
}
ddd2
?as.Date
ddd2 = as.Date(ddd2 , "%m/%d/%y")
ddd2
# this code is for EDAV blog post 2
# this code would generate 3 maps plot for grade A, grade B, grade C chinese restaurant
# in ggmap, and compare the distribution of them
# Clear all existing objects
rm(list = ls())
setwd('/Users/michaeljiang/Desktop/edav/edav/assets/michael_jiang_assets_two/src')
# Load the data
data = read.csv('nyc_restaurant_grade.csv')
# Select Chinese restaurant
data = data[data$CUISINECODE == 20 , ]
# Select Manhattan restaurant
data = data[data$BORO == 1 , ]
# Get the latest grading
require(stringr)
data = data[ , c(2 , 4 , 5 , 6 , 7 , 13 , 14)]
data = data[data$GRADEDATE != "" , ]
ddd = str_split(data$GRADEDATE , ' ')
ddd2 = NULL
for (i in 1 : length(ddd)) {
ddd2 = c(ddd2 , ddd[[i]][1])
}
ddd2 = as.Date(ddd2 , "%m/%d/%y")
data$GRADEDATE = ddd2
data
data
data[order(+data$PHONE , +data$GRADEDATE) , ]
data$ADDRESS = paste(str_trim(data$BUILDING) , str_trim(data$STREET) , ', New York, NY' , data$ZIPCODE)
data
names(dat)
names(data)
data = data[ , c(1 , 6 , 7 , 8)]
data = data[ , c(1 , 6 , 7 , 8)]
data
data[order(+data$ADDRESS) , ]
data[order(+data$DBA) , ]
data[order(+data$ADDRESS) , ]
data$ADDRESS
order(data$ADDRESS)
data[order(data$ADDRESS) , ]
data = data[order(data$ADDRESS , +data$GRADEDATE) , ]
data
data$delete = 1
for (i in 1 : nrow(data) - 1) {
if (data$DBA[i] != data$DBA[i + 1]) {
data$delete[i] = 0
}
}
data$DBA
data$DBA[3]
data$delete = 0
for (i in 1 : nrow(data) - 1) {
if (data$DBA[i] == data$DBA[i + 1]) {
data$delete[i] = 1
}
}
nrow(data)
names(data)
data$delete = 0
for (i in 1 : nrow(data) - 1) {
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
}
i = 3
data[i , 1]
data[i , 2]
data[i + 1 , 1]
data[i , 1] == data[i + 1 , 1]
data$delete
i = 4
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
data
head(dat)
head(data)
i
i = 1
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
head(data)
for (i in 1 : (nrow(data) - 1)) {
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
}
data
for (i in 1 : (nrow(data) - 1)) {
print(i)
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
}
data
data = data[data$delete == 0 , ]
data
data = data[data$delete == 0 , -5]
data
# this code is for EDAV blog post 2
# this code would generate 3 maps plot for grade A, grade B, grade C chinese restaurant
# in ggmap, and compare the distribution of them
# Clear all existing objects
rm(list = ls())
setwd('/Users/michaeljiang/Desktop/edav/edav/assets/michael_jiang_assets_two/src')
# Load the data
data = read.csv('nyc_restaurant_grade.csv')
# Select Chinese restaurant
data = data[data$CUISINECODE == 20 , ]
# Select Manhattan restaurant
data = data[data$BORO == 1 , ]
# Get the latest grading
require(stringr)
data = data[ , c(2 , 4 , 5 , 6 , 7 , 13 , 14)]
data = data[data$GRADEDATE != "" , ]
ddd = str_split(data$GRADEDATE , ' ')
ddd2 = NULL
for (i in 1 : length(ddd)) {
ddd2 = c(ddd2 , ddd[[i]][1])
}
ddd2 = as.Date(ddd2 , "%m/%d/%y")
data$GRADEDATE = ddd2
data$ADDRESS = paste(str_trim(data$BUILDING) , str_trim(data$STREET) , ', New York, NY' , data$ZIPCODE)
data = data[ , c(1 , 6 , 7 , 8)]
data = data[order(data$ADDRESS , +data$GRADEDATE) , ]
data$delete = 0
for (i in 1 : (nrow(data) - 1)) {
print(i)
if (data[i , 1] == data[i + 1 , 1]) {
data[i , 5] = 1
}
}
data = data[data$delete == 0 , -c(3 , 5)]
data
grade_A = data[data$CURRENTGRADE == 'A' , c(1 , 3)]
grade_B = data[data$CURRENTGRADE == 'B' , c(1 , 3)]
grade_C = data[data$CURRENTGRADE == 'C' , c(1 , 3)]
grade_A
nrow(grade_A)
nrow(data)
nrow(grade_B)
nrow(grade_C)
# Transform the address into latitude and longitude
require(RDSTK)
grade_A$latitude = 0
grade_A$longitude = 0
for (i in 1 : nrow(grade_A)) {
tryCatch({
geo_inf = street2coordinates(grade_A[i , 2])
grade_A[i , 3] = geo_inf$latitude
grade_A[i , 4] = geo_inf$longitude
} , warning = function(w) {
print(paste("MY_WARNING :  " , i))
} , error = function(err) {
print(paste("MY_ERROR   :  " , i))
} , finally = {
})
}
write.table(grade_A, "grade_A_geoinfo.txt", sep="\t")
grade_B$latitude = 0
grade_B$longitude = 0
for (i in 1 : nrow(grade_B)) {
tryCatch({
geo_inf = street2coordinates(grade_B[i , 2])
grade_B[i , 3] = geo_inf$latitude
grade_B[i , 4] = geo_inf$longitude
} , warning = function(w) {
print(paste("MY_WARNING :  " , i))
} , error = function(err) {
print(paste("MY_ERROR   :  " , i))
} , finally = {
})
}
write.table(grade_B, "grade_B_geoinfo.txt", sep="\t")
grade_C$latitude = 0
grade_C$longitude = 0
for (i in 1 : nrow(grade_C)) {
tryCatch({
geo_inf = street2coordinates(grade_C[i , 2])
grade_C[i , 3] = geo_inf$latitude
grade_C[i , 4] = geo_inf$longitude
} , warning = function(w) {
print(paste("MY_WARNING :  " , i))
} , error = function(err) {
print(paste("MY_ERROR   :  " , i))
} , finally = {
})
}
write.table(grade_C, "grade_C_geoinfo.txt", sep="\t")
# Plot the grade A B C Chinese restaurants on map using ggmap
library(ggplot2)
library(ggmap)
map <- get_map(location = c(lon = -73.98898 , lat = 40.73692) , zoom = 13 , maptype = "toner" , source = "stamen")
jpeg('grade_A_distribution.jpeg' , quality = 100)
ggmap(map) + geom_point(data = grade_A , aes(x = longitude , y = latitude) , colour = "green" , size = 3 ,  alpha = 0.6)
dev.off()
jpeg('grade_B_distribution.jpeg' , quality = 100)
ggmap(map) + geom_point(data = grade_B , aes(x = longitude , y = latitude) , colour = "orange" , size = 3 ,  alpha = 0.6)
dev.off()
jpeg('grade_C_distribution.jpeg' , quality = 100)
ggmap(map) + geom_point(data = grade_C , aes(x = longitude , y = latitude) , colour = "red" , size = 3 ,  alpha = 0.6)
dev.off()
save.image("~/Desktop/edav/edav/assets/michael_jiang_assets_two/src/workspace.RData")
